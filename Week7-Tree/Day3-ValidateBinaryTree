//Problem: https://leetcode.com/problems/validate-binary-search-tree/


/*
Time Complexity: O(1) for each call, but to recurse through entire tree up to O(n) calls with n being number of nodes in tree

Space Complexity: O(n) A call stack of up to size N can be built


General Explanation:
      If we traverse past leaf node to null node then that was succesful traversal. We keep track of the min and max value 
      for each side of the branch, and if that violates the condition, we return false


*/


    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    public boolean isValidBST(TreeNode root, long minVal, long maxVal) {
        if (root == null) return true;
        if (root.val >= maxVal || root.val <= minVal) return false;
        return isValidBST(root.left, minVal, root.val) && isValidBST(root.right, root.val, maxVal);
    }



//Code Referenced:  https://leetcode.com/problems/validate-binary-search-tree/discuss/32109/My-simple-Java-solution-in-3-lines
