//Problem: https://leetcode.com/problems/same-tree/

/*
Time Complexity: O(n) N=number of nodes in tree

Space Complexity:O(n) we build up to N call stacks in the tree at a given time.

We check if both nodes are equal to null, if so that means we sucessfully matched the nodes in one path all the way down to the leaf. 
If one node is past a leaf while another isn't or if there values aren't equal return false. We AND the recursive calls so that one 
false returns false for the whole function.


General Explanation:

*/

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        return DFS(p, q);
    }
    
    public boolean DFS(TreeNode p, TreeNode q){
        if(p==null && q==null) return true;
        if(p==null || q==null || p.val != q.val) return false;
        
        return DFS(p.left, q.left) && DFS(p.right, q.right);
    }
}





//Additional Resources: https://leetcode.com/problems/same-tree/discuss/2611786/Java-or-3-ways-or-Recursion-BFS-and-DFS
