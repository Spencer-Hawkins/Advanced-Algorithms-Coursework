//Problem: https://leetcode.com/problems/design-add-and-search-words-data-structure/


/*
Runtime:    AddWord-- O(n)   SearchWord-- )(n)


Space Complexity:   log_26(n)
                    


General Explanation:    A wordDictionary here is a node that has an array of up to 26 children -- one for each letter in the English alphabet. By adding a new word Dictionary 
                        by adding a blank wordDictionary at the index of the current char-i we add essentially the next letter into the tree at that level. Before
                        this new wordDictionary is added, the value in the array is null which means no words exist at that point or further down that path.
                        Final step of adding a word once all leters have been added is to mark isEndOfWord property as true so we know that charcter was the end of a word
                        We can then find if a word is possible by processing down the tree from the root one index at a time and checking if we can make it to the final letter
                        and if that final letter has isEndOfWord marked true
                        

*/


class WordDictionary {
    private WordDictionary[] children;
    boolean isEndOfWord;
    // Initialize your data structure here. 
    public WordDictionary() {
        children = new WordDictionary[26];
        isEndOfWord = false;
    }
    
    // Adds a word into the data structure. 
    public void addWord(String word) {
        WordDictionary curr = this;
        for(char c: word.toCharArray()){
            if(curr.children[c - 'a'] == null)
                curr.children[c - 'a'] = new WordDictionary();
            curr = curr.children[c - 'a'];
        }
        curr.isEndOfWord = true;
    }
    
    // Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. 
    public boolean search(String word) {
        WordDictionary curr = this;
        for(int i = 0; i < word.length(); ++i){
            char c = word.charAt(i);
            if(c == '.'){
                for(WordDictionary ch: curr.children)
                    if(ch != null && ch.search(word.substring(i+1))) return true;
                return false;
            }
            if(curr.children[c - 'a'] == null) return false;
            curr = curr.children[c - 'a'];
        }
        return curr != null && curr.isEndOfWord;
    }
}


//Code Referenced: https://leetcode.com/problems/design-add-and-search-words-data-structure/discuss/1725327/JavaC%2B%2BPython-A-very-well-detailed-EXPLANATION!
