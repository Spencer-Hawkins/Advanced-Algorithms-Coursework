//Problem: https://leetcode.com/problems/process-restricted-friend-requests

/*
Runtime: O(n*m*l )  n=number of requests, 
                    m=number of restrictions to search through,
                    l=lookup time for Find of a given friend --> Initially, this lookup is constant, but depending on size of friend group can grow to size of log(n) 
Storage: O(n*p)     n=number of requests,
                    p=number of people in network
General Explanation: 

For this problem, we need to use Union Find. This algorithm works by identifying all nodes within a tree point to a head and then comparing if two nodes have the same head
you can find out if they are part of the same tree. You can then Union the trees by making one root point to the other.
More information on this process can be found here: https://www.youtube.com/watch?v=ayW5B2W9hfo

This algorithm begins by creating an array arr to represent all of the people in the network. These values begin as the their own index indicating that 
each individual is their own friend. As the algorithm progresses, we perform union Find and point one individual from a friend pair to point to the other's
index. When arr[i]=i you know that you found the head for that friend group.

The alforithm progresses by initializing an empty boolean array for us to fill if we have a successful or failed request. We then iterate through each request 
to determine if the request is successful.

We take the two individuals we are trying to make a friend request with and find the heads of their respective friend groups using the find method as described
above. We then run throughall of the restrictions and check whether or not the heads of our two groups are restricted from becoming friends. If the heads of the 
two groups we have a request to join are equal to the heads of the two groups restricted from joining, then we add false to our array to return and break from 
the current iteration.

If the heads of the groups we have a request to join don't have a restriction preventing them from being merged, then we add true to our array to return and 
then merge the two groups using the method described above by moving one index to point to the heads of the other.

We continue with this process through all requests and return the final boolean array produced :)


*/
//Code: 

class Solution {
    public boolean[] friendRequests(int n, int[][] restrictions, int[][] requests) {
        int[] arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=i;
        }
        int j=0;
        boolean[] ret=new boolean[requests.length];
        for(int[] a:requests){
            int x=find(a[0],arr);
            int y=find(a[1],arr);
            boolean flag=true;
            for(int i=0;i<restrictions.length;i++){
                int l=find(restrictions[i][0],arr);
                int r=find(restrictions[i][1],arr);
                if(((l==x && r==y) || (l==y && r==x))){
                    flag=false;
                    break;
                }
            }
            ret[j++]=flag;
            if(flag){
                union(x,y,arr);
            }
        }
        return ret;
    }
    private void union(int a,int b,int[] arr){
        int x=find(a,arr);
        int y=find(b,arr);
        if(x==y) return;
        arr[y]=x;
    }
    private int find(int x,int[] arr){
        if(arr[x]==x) return x;
        return find(arr[x],arr);
    }
}



//Additional Resoureces
//https://leetcode.com/problems/process-restricted-friend-requests/discuss/2489402/Java-Solution-or-Union-Find-or-Disjoint-Sets-or-Without-rank
//https://www.youtube.com/watch?v=EVnIVVF-Jfs
