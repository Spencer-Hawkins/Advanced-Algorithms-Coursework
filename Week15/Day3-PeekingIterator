//Problem


/*

Time Complexity: O(1), O(1), O(1)

Space Complexity: O(n)

General Explanation:  All that is needed in addition to Iterator object, is next property which stores integer value of next item in iterator
                      Initialize by creating iter, and checking if current iterator has a next value and then adding it to constructed iterator.
                      Peek operation returns value stored in next.
                      Next moves the iterator over one value as well as next and returns current val.


*/


class PeekingIterator implements Iterator<Integer> {
    
    Iterator<Integer> iter = null;
    Integer next = null;
    
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
	    iter = iterator;
        if(hasNext()) next = iter.next();
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
        return next;
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
	    Integer currVal = next;
        if(iter.hasNext()) 
            next = iter.next();
        else 
            next = null;
        return currVal;
	}
	
	@Override
	public boolean hasNext() {
	    return next != null || iter.hasNext();
	}
}

//Code Referenced: https://leetcode.com/problems/peeking-iterator/discuss/1980013/Java-Explanation
