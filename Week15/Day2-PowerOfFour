//Problem: 


/* 

Time Complexity: O(log(n)) vs O(1)

Space Complexity: O(log(n)) vs O(1)

General Explanation:  There are a finite number of powers of four that can be stored as an integer and they can easily be hardcoded solutions to improve effificency
                      Otherwise, recursion will do. Base case is number==1 which is 4^0. If n!=1, then divide n by four and check if this new number is an integer, if not return false

*/


class Solution {
    public boolean isPowerOfFour(int n) {
        if(n == 1) return true;
        if(n == 0 || n % 2 != 0) return false;
        double d = n/4.0;
        if (d % 1 != 0) return false;
        return isPowerOfFour((int)d);
    }
}

//Second Solution



class Solution {
    public boolean isPowerOfFour(int n) {
        return n == 1 || n == 4 || n == 16 || n == 64 || n == 256 || n == 1024 || n == 4096 || n == 16384 || n == 65536 || n == 262144 || n == 1048576 || n == 4194304 || n == 16777216 || n == 67108864 || n == 268435456 || n == 1073741824;
    }
}
