// Problem:  https://leetcode.com/problems/two-sum/

/*
Space Complexity: O(n)


Time Complexity: O(n)


General Explanation: If target minus-currNum == a number that has been seen before, then that is our solution. We can pull the seen number from the hashmap and 
                     then return it immediately


*/


class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> seen = new HashMap<>();
        for (int i = 0; i < nums.length; ++i) {
            int b = nums[i], a = target - b;
            if (seen.containsKey(a)) return new int[]{seen.get(a), i}; // Found pair of (a, b), so that a + b = target
            seen.put(b, i);
        }
        return new int[]{};
    }
}


//Code Referenced: https://leetcode.com/problems/two-sum/discuss/1378064/C%2B%2BJavaPython-HashMap-Two-pointers-Solutions-Clean-and-Concise
