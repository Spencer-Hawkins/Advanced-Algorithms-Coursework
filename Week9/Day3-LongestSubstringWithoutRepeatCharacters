//Problem: https://leetcode.com/problems/longest-substring-without-repeating-characters/

/*
Time Complexity: O(n) worst case, j itrates over every index with i iterating right behing it

Space Complexity:O(n) the map grows at largest to the size of the string

General Explanation:  We use two pointers. Our j pointer is our forward pointer which traverses down the string while i, is the 
                      anchor. We move that pointer only when neccessary. We put all found values in a map, and if the size of our map grows larger than 
                      our window, then we know there is a value that we need to decrement from our map

*/


class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> map = new HashMap<>();
        int i = 0;
        int j = 0;
        int max = 0;
        while(j < s.length()){
            map.put(s.charAt(j), map.getOrDefault(s.charAt(j), 0) + 1);
            if(map.size() == j - i + 1){
                max = Math.max(max, j - i + 1);
                j++;
            }
            else if(map.size() < j - i + 1){
                while(map.size() < j - i + 1){
                    map.put(s.charAt(i), map.get(s.charAt(i)) - 1);
                    if(map.get(s.charAt(i)) == 0) map.remove(s.charAt(i));
                    i++;
                }
                j++;
            }
        }
        return max;
    }
}


//Code Refernced: https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/2133524/JavaC%2B%2B-A-reall-Detailed-Explanation
