//Problem: https://leetcode.com/problems/rotate-image/

/*
Runtime: O(n) both solutions run through entire data set and each point individually once.

Space Complexity: O(n^2) for first solution since it duplicates the matrix and O(1) for second solution since no new data structure is created

General Explanation:

First solution iterates through each point adding it to the destination position in the empty array.

Second solution does this by switching four points at a time.


*/

//Solution 1, create copy and then copy that new matrix.
class Solution {
    public void rotate(int[][] matrix) {
        int[][] arr = new int[matrix[0].length][matrix.length];

        int x = 0;
        int y = 0;
        for (int i = 0; i < matrix.length; i++) {

            for (int j = matrix[i].length - 1; j >= 0; j--) {

                arr[y][x++] = matrix[j][i];
            }
            y++;
            x = 0;


        }
        System.arraycopy(arr, 0, matrix, 0, arr.length);


    }
}


//Solution 2, rotate in place
class Solution {
    public void rotate(int[][] matrix) {
        for(int i = 0; i < matrix.length / 2; i ++) {
            for(int j = i; j < matrix.length - i - 1; j ++) {
                rotatePoints(matrix, i, j);
            }
        }
        
        //return matrix;
    }
    
    public void rotatePoints(int[][] mat, int a, int b) {
        int n = mat.length-1, temp1, temp2, temp3;
        int c = b,
            d = n - a,
            e = n - a,
            f = n - b,
            g = n - b,
            h = a;
        
        temp1 = mat[c][d];
        mat[c][d] = mat[a][b];
        temp2 = mat[e][f];
        mat[e][f] = temp1;
        temp3 = mat[g][h];
        mat[g][h] = temp2;
        mat[a][b] = temp3;
        
    }
}
*/


//Code Referenced:
//https://leetcode.com/problems/rotate-image/discuss/2607278/100-faster-Java-Solution-with-rule-of-point-rotation
//https://leetcode.com/problems/rotate-image/discuss/2607919/the-easiest-solution-faster-than-100.00-of-Java
