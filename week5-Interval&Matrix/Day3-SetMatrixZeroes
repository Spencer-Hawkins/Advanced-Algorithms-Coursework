// Problem: https://leetcode.com/problems/set-matrix-zeroes/



/*

Time Complexity: O(n) perform two passes over every value in array as well as additional pass over rows and columns with zero values

Space Complexity: O(1) we create no additional data structures


General Explanation:  On first pass through the array, search for 0's. Turn all non-zero values in rows and cols with zeroes into arbitrary constant.
                      On second pass through array turn these constant values back into zeroes.



*/


class Solution {
    public void setZeroes(int[][] matrix) {
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j]==0)setRowAndCol(matrix, i, j);
            }
        }
        
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j]==-7909) matrix[i][j]=0;
            }
        }
        
    }
    
    public void setRowAndCol(int[][] matrix, int x, int y){
    
        for(int col=0; col<matrix[0].length; col++){
            if(matrix[x][col]!=0) matrix[x][col]=-7909;
        }
        
        for(int row=0; row<matrix.length; row++){
             if(matrix[row][y]!=0) matrix[row][y]=-7909;
        }
    }
    
 
}

//Additional Resources:   https://leetcode.com/problems/set-matrix-zeroes/discuss/2597889/Java-Easy-to-understand-O(n)-time-and-O(1)-space
//                        https://www.youtube.com/watch?v=T41rL0L3Pnw
