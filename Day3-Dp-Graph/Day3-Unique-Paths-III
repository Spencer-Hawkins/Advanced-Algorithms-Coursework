//https://leetcode.com/problems/unique-paths-iii/

/*
Runtime-- getNonObstacles() and getStartingSquare() each run in m*n time and are dependent on the size of the input grid
          dfs is dependent on the number of non obstacle cells and each call of DFS itself is a constant time operation, but it can build on the callstack


Space Complexity-- NonObstacles and startingSquare are both constants of constant size, and the input grid is of size m*n, but the callstack for dfs builds 
                      up dependent on the number of non obstacle cells in the matrix up to 4^n with n being the number of non obstacle cells
          


General Explanation-- The function takes a recursive DFS approach by having each call check whether or not it is currently at the finishing cell, if so,
                       if the value in that cell for the amount of non-obstacle cells is 0, then that means that call has traveled over the equivalent of 
                       every cell in the matrix. We then return 1 from this child call because this identified one new succesful path.

*/

class Solution {
    public int uniquePathsIII(int[][] grid) {
        int nonObstacleCells = getNonObstacles(grid);
        int[] startingSquare = getStartingSquare(grid);
        return dfs(grid, nonObstacleCells + 1, startingSquare[0], startingSquare[1]);
    }
    
    public int dfs(int[][] grid, int nonObstacleCells, int row, int col) {
        if (row < 0 || col < 0 || row == grid.length || col == grid[0].length || grid[row][col] == -1)
            return 0;
        
        if (grid[row][col] == 2) {
            if (nonObstacleCells == 0) return 1;
            return 0;
        }
        
        grid[row][col] = -1;
        
        int result = dfs(grid, nonObstacleCells - 1, row + 1, col)
            + dfs(grid, nonObstacleCells - 1, row - 1, col)
            + dfs(grid, nonObstacleCells - 1, row, col + 1)
            + dfs(grid, nonObstacleCells - 1, row, col - 1);
        
        grid[row][col] = 0;
        
        return result;
    }
    
    int getNonObstacles(int[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 0)
                    count++;
            }
        }
        return count;
    }
    
    int[] getStartingSquare(int[][] grid) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1)
                    return new int[] {i, j};
            }
        }
        return new int[0];
    }
}


//Additional Resources -- https://leetcode.com/problems/unique-paths-iii/discuss/2536265/Java-Easy-to-Understand-Code-0ms-Solution
