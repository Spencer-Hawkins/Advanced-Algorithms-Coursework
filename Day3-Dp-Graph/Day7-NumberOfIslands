//https://leetcode.com/problems/number-of-islands/


/*
Runtime: O(m*n) -- we iterate over the entire cell matrix one time in our for loop and then traverse over every cell of each island one additional time for DFS search

Space Complexity:O(m*n) -- we receive m*n matrix and recursive call stack builds dependent on size of the island


General Explanation:

Double For Loop, when an island is found, increase count by one and 'sink island' by turning all 1's to 0's through DFS call
at end of for loop, return count

*/

class Solution {
    public int numIslands(char[][] grid) {
        int numOfIslands = 0;
        for(int i=0; i<grid.length; i++ ){
            for(int j=0; j< grid[0].length; j++){
                if(grid[i][j]=='1'){
                    numOfIslands++;
                    dfs(grid, i, j);
                }
            }
        }
        return numOfIslands;
    }
    
    public void dfs(char[][] grid, int x, int y){
        if(x>=0 && x<grid.length && y>=0 && y<grid[0].length){
            if(grid[x][y]=='1'){
                grid[x][y]='0';
                dfs(grid, x, y+1);
                dfs(grid, x, y-1);
                dfs(grid, x+1, y);
                dfs(grid, x-1, y);
            }else{
                return;
            }
        }else{
            return;
        }
    }
}



//Additional Resources
