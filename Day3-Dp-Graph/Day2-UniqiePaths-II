//https://leetcode.com/problems/unique-paths-ii


/*
Runtime: O(m*n) We run through every cell once in an m*n grid

Space Complexity: O(m*n) we have two matrices of size m*n

General Explanation:
--Solution below prioritizes runtime over spacecomplexity by initializing a new array instead of manipulating the existing one. Am ore memory effificent solution would
instead change all obstacles in the grid to some constant value such as -1, the algorithm would then proceed as in traditional unique-paths except set a cell's value 
to 0 when -1 is then encountered

Side note: We find the amount of paths up to a given cell by summing up the amount of paths to the cell directly above it and directly to the left of it

*/


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid[0][0]==1){
            return 0;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp= new int[m][n];
        dp[0][0]=1;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                int top=0;
                int left=0;
                if(i==0 && j==0){
                    continue;
                }
                if(i>0 && i<m){
                    left=dp[i-1][j];
                }
                if(j>0 && j<n){
                    top=dp[i][j-1];
                }
                dp[i][j]=top+left;
                if(obstacleGrid[i][j]==1){
                    dp[i][j]=0;
                }
            }
        }
        return dp[m-1][n-1];
    
    }
}

//https://leetcode.com/problems/unique-paths-ii/discuss/2567799/Java-solution-with-time-complexity-and-explanation
