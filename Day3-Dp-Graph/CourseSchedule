//Problem

/*
Time Complexity:

Space Complexity:

General Explanation:


Two Options in DFS call:
  -Check if our graph contains a cycle, if so, return false
  -Remove each dependency one by one if that class can be completed


*/

class Solution {
    public boolean canFinish(int numCourses, int[][] pre) {
        int n = numCourses;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        
        //CREATING ADJANCY LIST
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] e: pre){
            adj.get(e[1]).add(e[0]);
        }
        
        //CREATED VIS AND PATHVIS --> It's a simple check if there's any cycle in 'DIRECTED' graph
        boolean[] vis = new boolean[n];    
        boolean[] pathvis = new boolean[n];
      
        //YOU ARE CHECKING IF THERE'S ANY CYCLE PRESENT
        //IF THERE'S ANY CYCLE PRESENT THAT MEANS YOU CAN'T COMPLETE ALL THE COURSES (YOU WILL STAY IN LOOP)
        for(int i=0; i<n; i++){
              if(vis[i]!=true){
                  if(dfs(i,adj,vis,pathvis)==true) 
                      return false;  
              }
        }
        
        return true;        //RETURN TRUE IF YOU FOUND NO CYCLE
        
  }
    
    public static boolean dfs(int node, ArrayList<ArrayList<Integer>> edges, 
                              boolean[] vis, boolean[] pathvis){
        
        vis[node] = true;               //MARK VIS AND PATHVIS BOTH TRUE AS YOU GO DEEP THROUGH A PATH--> DFS
        pathvis[node] = true;
        
        for(Integer it: edges.get(node)){
            if(vis[it]!=true){
                if(dfs(it,edges,vis,pathvis)==true) return true;
            }else if(pathvis[it]==true){
                return true;
            }
        }
        
        pathvis[node] = false;          //WHILE BACKTRACKING MAKE SURE YOU MARK THE PATHVIS FALSE
        return false;
    }
}


//Additional Resources: https://www.youtube.com/watch?v=EgI5nU9etnU , https://leetcode.com/problems/course-schedule/discuss/2568592/Java-Solutionor-Using-DFS
