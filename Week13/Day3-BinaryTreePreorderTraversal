//Problem: https://leetcode.com/problems/binary-tree-preorder-traversal


/*

Time Complexity: O(n)


Space Complexity: O(n)


General Explanation:  Preorder traversal is from top to bottom, left to right. We travel down each level, from the root returning the root and then its 
                      left children, and then its right until we reach the bottom of the tree (value == null)


*/






class Solution {
    List<Integer> ans = new ArrayList<>()

    public List<Integer> preorderTraversal(TreeNode root) {
        traverse(root);
        return ans;
    }

    public void traverse(TreeNode root) {
        if (root == null) return;
        ans.add(root.val);
        traverse(root.left);
        traverse(root.right);
    }
}



//Doe Referenced: https://leetcode.com/problems/binary-tree-preorder-traversal/discuss/2745358/JAVA-or-Iterative-and-Recursive-or-Clean-and-Simple
