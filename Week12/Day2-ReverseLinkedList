//Problem:


/*

Time Complexity: O(n)


Space Complexity: O(1)


General Explanation:  Keep track of previous, current, and next nodes. Shift connection from current node to previous then move the current to previous,
                      next to current and find the new next node from the new current.

*/


class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;  
        ListNode current = head;
    
        
        while(current != null) { 
            ListNode next = current.next; 
            current.next = prev;
            prev = current;
            current = next;
        }
       return prev; 
    }
}


//Code Referenced: https://leetcode.com/problems/reverse-linked-list/
